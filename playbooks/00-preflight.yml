---
- name: Kubernetes Pre-flight Checks
  hosts: all
  become: true
  gather_facts: true
  roles:
    - ../roles/common
  vars:
    k8s_user: "svc_lin_kubernetes"
    k8s_group: "kubernetes"
    k8s_dirs:
      - "/etc/kubernetes"
      - "/var/lib/kubernetes"
      - "/var/log/kubernetes"
      - "/var/lib/kubelet"
      - "/var/lib/etcd"

  pre_tasks:
    - name: Get short hostname
      ansible.builtin.command: hostname -s
      register: hostname_result
      changed_when: false

    - name: Set short hostname fact
      ansible.builtin.set_fact:
        k8s_node_name: "{{ hostname_result.stdout }}"

  tasks:
    - name: Verify system requirements
      block:
        - name: Check memory
          ansible.builtin.assert:
            that: ansible_memtotal_mb >= 1740
            msg: "Node requires at least 1.7GB RAM"

        - name: Check CPU cores
          ansible.builtin.assert:
            that: ansible_processor_cores >= 2
            msg: "Node requires at least 2 CPU cores"

        - name: Check OS distribution
          ansible.builtin.assert:
            that:
              - ansible_distribution == "CentOS"
              - ansible_distribution_major_version | int >= 9
            msg: "Only CentOS Stream 9 or higher is supported"

    - name: Set up Kubernetes service account
      block:
        - name: Create kubernetes group
          ansible.builtin.group:
            name: "{{ k8s_group }}"
            state: present

        - name: Create kubernetes service account
          ansible.builtin.user:
            name: "{{ k8s_user }}"
            group: "{{ k8s_group }}"
            system: true
            shell: /bin/bash
            create_home: true
            state: present

        - name: Allow jholderman to switch to kubernetes service account
          ansible.builtin.lineinfile:
            path: /etc/sudoers.d/kubernetes
            create: true
            line: "jholderman ALL=({{ k8s_user }}) NOPASSWD: /bin/su - {{ k8s_user }}"
            validate: "/usr/sbin/visudo -cf %s"
            mode: "0440"

        - name: Add kubernetes sudo permissions
          ansible.builtin.copy:
            dest: /etc/sudoers.d/kubernetes_permissions
            content: |
              # Allow kubernetes user to run specific commands without password
              {{ k8s_user }} ALL=(ALL) NOPASSWD: /usr/bin/kubeadm, /usr/bin/kubelet, /usr/bin/kubectl
              # Allow kubernetes user to manage kubernetes directories
              {{ k8s_user }} ALL=(ALL) NOPASSWD: /bin/chown -R {{ k8s_user }}:{{ k8s_group }} /etc/kubernetes, /var/lib/kubernetes, /var/log/kubernetes, /var/lib/kubelet, /var/lib/etcd
            mode: "0440"
            validate: "/usr/sbin/visudo -cf %s"

        - name: Create kubernetes directories
          ansible.builtin.file:
            path: "{{ item }}"
            state: directory
            owner: "{{ k8s_user }}"
            group: "{{ k8s_group }}"
            mode: "0750"
          loop: "{{ k8s_dirs }}"

    - name: Verify network configuration
      block:
        - name: Check if swap is disabled
          ansible.builtin.command: swapon --show
          register: swap_status
          failed_when: swap_status.stdout != ""
          changed_when: false

        - name: Verify required ports are available
          ansible.builtin.wait_for:
            port: "{{ item }}"
            state: stopped
            timeout: 5
          loop:
            - 6443 # Kubernetes API server
            - 2379 # etcd server client API
            - 2380 # etcd server client API
            - 10250 # Kubelet API
            - 10251 # kube-scheduler
            - 10252 # kube-controller-manager

        - name: Check network connectivity
          ansible.builtin.command: ping -c 1 {{ item }}
          changed_when: false
          loop:
            - "1.1.1.1" # Internet connectivity
            - "{{ hostvars[groups['control_plane'][0]]['ansible_host'] }}" # Control plane
          when: inventory_hostname in groups['workers']

    - name: Verify DNS resolution
      block:
        - name: Check forward DNS resolution
          ansible.builtin.command: "getent hosts {{ inventory_hostname }}"
          changed_when: false
          register: dns_forward

        - name: Check reverse DNS resolution
          ansible.builtin.command: "getent hosts {{ ansible_default_ipv4.address }}"
          changed_when: false
          register: dns_reverse

        - name: Verify hostname resolution matches inventory
          ansible.builtin.assert:
            that:
              - dns_forward.rc == 0
              - dns_reverse.rc == 0
            msg: "DNS resolution failed for node"
