# playbooks/02-control-plane.yml
---
- name: Initialize Kubernetes Control Plane
  hosts: control_plane
  become: true
  gather_facts: true
  vars:
    temp_manifest_dir: "/tmp/k8s_manifests"

  pre_tasks:
    - name: Create temporary directory for manifests
      ansible.builtin.file:
        path: "{{ temp_manifest_dir }}"
        state: directory
        mode: '0750'
        owner: "{{ k8s_user }}"
        group: "{{ k8s_group }}"

    - name: Ensure SELinux context is correct for temp directory
      ansible.builtin.command: "chcon -Rt container_file_t {{ temp_manifest_dir }}"
      changed_when: true

  tasks:
    - name: Install Kubernetes packages
      ansible.builtin.dnf:
        name:
          - kubelet-{{ kubernetes_version }}
          - kubeadm-{{ kubernetes_version }}
          - kubectl-{{ kubernetes_version }}
        state: present
        disable_excludes: kubernetes

    - name: Enable and start kubelet service
      ansible.builtin.systemd:
        name: kubelet
        state: started
        enabled: true
      when: not ansible_check_mode

    - name: Get short hostname
      ansible.builtin.command:
        cmd: hostname -s
      register: hostname_result
      changed_when: false

    - name: Generate kubeadm config
      ansible.builtin.template:
        src: ../templates/kubeadm-config.yaml.j2
        dest: /etc/kubernetes/kubeadm-config.yaml
        owner: "{{ k8s_user }}"
        group: "{{ k8s_group }}"
        mode: '0640'

    - name: Initialize Kubernetes cluster
      ansible.builtin.command: >
        kubeadm init 
        --config=/etc/kubernetes/kubeadm-config.yaml 
        --upload-certs
        --v=5
      register: kubeadm_init
      changed_when: "'Successfully initialized' in kubeadm_init.stdout"
      failed_when: 
        - kubeadm_init.rc != 0
        - "'already exists' not in kubeadm_init.stderr"

    - name: Set up Kubernetes configuration access
      block:
        - name: Create kubernetes group if it doesn't exist
          ansible.builtin.group:
            name: kubernetes
            state: present

        - name: Add service accounts to kubernetes group
          ansible.builtin.user:
            name: "{{ item }}"
            groups: kubernetes
            append: true
          loop:
            - "{{ k8s_user }}"
            - "{{ ansible_user }}"

        - name: Set proper permissions for scheduler config
          ansible.builtin.file:
            path: /etc/kubernetes/scheduler.conf
            owner: "{{ k8s_user }}"
            group: "{{ k8s_group }}"
            mode: '0640'

        - name: Set proper permissions on kubernetes config directory
          ansible.builtin.file:
            path: /etc/kubernetes
            state: directory
            mode: '0750'
            group: kubernetes

        - name: Set proper permissions on admin.conf
          ansible.builtin.file:
            path: /etc/kubernetes/admin.conf
            mode: '0640'
            group: kubernetes

        - name: Create .kube directory for ansible service account
          ansible.builtin.file:
            path: "/home/{{ ansible_user }}/.kube"
            state: directory
            owner: "{{ ansible_user }}"
            group: kubernetes
            mode: '0750'

        - name: Copy admin.conf for ansible service account
          ansible.builtin.copy:
            src: /etc/kubernetes/admin.conf
            dest: "/home/{{ ansible_user }}/.kube/config"
            remote_src: true
            owner: "{{ ansible_user }}"
            group: kubernetes
            mode: '0640'

        - name: Create .kube directory for kubernetes service account
          ansible.builtin.file:
            path: "/home/{{ k8s_user }}/.kube"
            state: directory
            owner: "{{ k8s_user }}"
            group: kubernetes
            mode: '0750'

        - name: Copy admin.conf for kubernetes service account
          ansible.builtin.copy:
            src: /etc/kubernetes/admin.conf
            dest: "/home/{{ k8s_user }}/.kube/config"
            remote_src: true
            owner: "{{ k8s_user }}"
            group: kubernetes
            mode: '0640'

    - name: Set KUBECONFIG environment for service account
      ansible.builtin.lineinfile:
        path: "/home/{{ k8s_user }}/.bashrc"
        line: 'export KUBECONFIG=/home/{{ k8s_user }}/.kube/config'
        state: present

    - name: Wait for kubelet to start
      ansible.builtin.systemd:
        name: kubelet
        state: started
      register: kubelet_start
      until: kubelet_start is success
      retries: 30
      delay: 10

    - name: Wait for Kubernetes API to be ready
      ansible.builtin.shell: |
        while ! kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes; do
          sleep 5
        done
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      register: api_ready
      changed_when: false
      retries: 30
      delay: 10
      until: api_ready is success

    - name: Install Calico
      block:

      - name: Download Calico manifest
        ansible.builtin.get_url:
          url: "https://raw.githubusercontent.com/projectcalico/calico/{{ calico_version }}/manifests/calico.yaml"
          dest: "{{ temp_manifest_dir }}/calico.yaml"
          mode: '0664'
        register: calico_download

      - name: Apply Calico manifest
        kubernetes.core.k8s:
          state: present
          src: "{{ temp_manifest_dir }}/calico.yaml"
          wait: true
          wait_timeout: 300
        become: true
        become_user: "{{ k8s_user }}"
        register: calico_result

      - name: Wait for Calico pods to be ready
        ansible.builtin.command:
          cmd: kubectl wait --namespace kube-system --for=condition=ready pod --selector=k8s-app=calico-node --timeout=180s
        become: true
        become_user: "{{ k8s_user }}"
        register: calico_ready
        retries: 30
        delay: 10
        until: calico_ready.rc == 0

    - name: Install MetalLB
      block:

        - name: Create MetalLB namespace
          kubernetes.core.k8s:
            name: metallb-system
            api_version: v1
            kind: Namespace
            state: present
          become: true
          become_user: "{{ k8s_user }}"

        - name: Create MetalLB memberlist secret
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: memberlist
                namespace: metallb-system
              type: Opaque
              stringData:
                secretkey: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=128') }}"
          become: true
          become_user: "{{ k8s_user }}"

        - name: Download MetalLB manifest
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml"
            dest: "{{ temp_manifest_dir }}/metallb.yaml"
            mode: '0664'
          register: metallb_download

        - name: Apply MetalLB manifest
          kubernetes.core.k8s:
            state: present
            src: "{{ temp_manifest_dir }}/metallb.yaml"
            wait: true
            wait_timeout: 300
          become: true
          become_user: "{{ k8s_user }}"
          register: metallb_result

        - name: Wait for MetalLB pods to be ready
          ansible.builtin.command:
            cmd: kubectl wait --namespace metallb-system --for=condition=ready pod --selector=app=metallb --timeout=180s
          become: true
          become_user: "{{ k8s_user }}"
          register: metallb_ready
          retries: 30
          delay: 10
          until: metallb_ready.rc == 0

        - name: Configure MetalLB IP pool
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: metallb.io/v1beta1
              kind: IPAddressPool
              metadata:
                name: first-pool
                namespace: metallb-system
              spec:
                addresses:
                  - "{{ metallb_ip_range }}"
          become: true
          become_user: "{{ k8s_user }}"

        - name: Configure MetalLB L2 advertisement
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: metallb.io/v1beta1
              kind: L2Advertisement
              metadata:
                name: l2-advert
                namespace: metallb-system
              spec:
                ipAddressPools:
                  - first-pool
          become: true
          become_user: "{{ k8s_user }}"

    - name: Install NGINX Ingress Controller
      block:

        - name: Download NGINX Ingress Controller manifest
          ansible.builtin.get_url:
            url: "https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-{{ nginx_ingress_version }}/deploy/static/provider/cloud/deploy.yaml"
            dest: "{{ temp_manifest_dir }}/nginx-ingress.yaml"
            mode: '0664'
          register: nginx_download
  
        - name: Apply NGINX Ingress Controller manifest
          kubernetes.core.k8s:
            state: present
            src: "{{ temp_manifest_dir }}/nginx-ingress.yaml"
            wait: true
            wait_timeout: 300
          become: true
          become_user: "{{ k8s_user }}"
          register: nginx_result

    - name: Get join command
      ansible.builtin.command:
        cmd: kubeadm token create --print-join-command
      register: join_command
      changed_when: false

    - name: Store join command
      ansible.builtin.set_fact:
        join_command: "{{ join_command.stdout_strip }}"

    - name: Wait for control plane to be ready
      ansible.builtin.command: 
        cmd: "kubectl wait --for=condition=Ready node/{{ hostname_result.stdout }} --timeout=300s"
      become: true
      become_user: "{{ k8s_user }}"
      register: node_ready
      changed_when: false
      retries: 30
      delay: 10
      until: node_ready.rc == 0

  post_tasks:
    - name: Clean up temporary manifest directory
      ansible.builtin.file:
        path: "{{ temp_manifest_dir }}"
        state: absent
      when: temp_manifest_dir is defined